#!/bin/sh

. "${SCRIPTS_DIR:-${0%/*}/..}/scriptsrc"
. "$lib/args"

prepend_to_lines() {
    use_pipe="false"

    line=""

    file=""
    list=""

    for arg in "$@"
    do
        case "$arg" in
            "--file="*) file=$(get_arg_value "--file=" "$arg") ;;
            "--list="*) list=$(get_arg_value "--list=" "$arg") ;;
            "--use-pipe") use_pipe="true" ;;
            *) line="$arg" ;;
        esac
    done

    if [ "$use_pipe" = "true" ]
    then
        sed "s/^/$line/"
    elif [ -w "$file" ]
    then
        sed -i "s/^/$line/" "$file"
    elif [ -n "$list" ]
    then
        echo "$list" | sed "s/^/$line/"
    fi
}

append_to_lines() {
    use_pipe="false"

    line=""

    file=""
    list=""

    for arg in "$@"
    do
        case "$arg" in
            "--file="*) file=$(get_arg_value "--file=" "$arg") ;;
            "--list="*) list=$(get_arg_value "--list=" "$arg") ;;
            "--use-pipe") use_pipe="true" ;;
            *) line="$arg" ;;
        esac
    done

    if [ "$use_pipe" = "true" ]
    then
        sed "s/$/$line/"
    elif [ -w "$file" ]
    then
        sed -i "s/^/$line/" "$file"
    elif [ -n "$list" ]
    then
        echo "$list" sed "s/$/$line/"
    fi
}

prepend_line() {
    use_pipe="false"

    line=""

    file=""
    list=""

    for arg in "$@"
    do
        case "$arg" in
            "--file="*) file=$(get_arg_value "--file=" "$arg") ;;
            "--list="*) list=$(get_arg_value "--list=" "$arg") ;;
            "--use-pipe") use_pipe="true" ;;
            *) line="$arg" ;;
        esac
    done

    if [ "$use_pipe" = "true" ]
    then
        sed "1i\\$line"
    elif [ -w "$file" ]
    then
        if [ -s "$file" ]
        then
            sed -i "1i\\$line" "$file"
        else
            echo "$line" >> "$file"
        fi
    elif [ -n "$list" ]
    then
        echo "$list" | sed "1i\\$line"
    fi
}

append_line() {
    use_pipe="false"

    line=""

    file=""
    list=""

    for arg in "$@"
    do
        case "$arg" in
            "--file="*) file=$(get_arg_value "--file=" "$arg") ;;
            "--list="*) list=$(get_arg_value "--list=" "$arg") ;;
            "--use-pipe") use_pipe="true" ;;
            *) line="$arg" ;;
        esac
    done

    if [ "$use_pipe" = "true" ]
    then
        sed "\$a\\$line"
    elif [ -w "$file" ]
    then
        echo "$line" >> "$file"
    elif [ -n "$list" ]
    then
        echo "$list" | sed "\$a\\$line"
    fi
}

rm_line() {
    use_pipe="false"

    line=""

    file=""
    list=""

    for arg in "$@"
    do
        case "$arg" in
            "--file="*) file=$(get_arg_value "--file=" "$arg") ;;
            "--list="*) list=$(get_arg_value "--list=" "$arg") ;;
            "--use-pipe") use_pipe="true" ;;
            *) line="$arg" ;;
        esac
    done

    line=$(enc --sed-regex "$line")

    if [ "$use_pipe" = "true" ]
    then
        sed "/^$line$/d"
    elif [ -w "$file" ]
    then
        sed -i "/^$line\$/d" "$file"
    elif [ -n "$list" ]
    then
        echo "$list" | sed "/^$line\$/d"
    fi
}

to_top() {
    use_pipe="false"

    line=""

    file=""
    list=""

    for arg in "$@"
    do
        case "$arg" in
            "--file="*) file=$(get_arg_value "--file=" "$arg") ;;
            "--list="*) list=$(get_arg_value "--list=" "$arg") ;;
            "--use-pipe") use_pipe="true" ;;
            *) line="$arg" ;;
        esac
    done

    if [ "$use_pipe" = "true" ]
    then
        rm_line "$line" | prepend_line --use-pipe
    elif [ -w "$file" ]
    then
        rm_line "$line" --file="$file" && prepend_line "$line" --file="$file"
    elif [ -n "$list" ]
    then
        echo "$list" | rm_line --use-pipe "$line" | prepend_line --use-pipe
    fi
}

to_bottom() {
    use_pipe="false"

    line=""

    file=""
    list=""

    for arg in "$@"
    do
        case "$arg" in
            "--file="*) file=$(get_arg_value "--file=" "$arg") ;;
            "--list="*) list=$(get_arg_value "--list=" "$arg") ;;
            "--use-pipe") use_pipe="true" ;;
            *) line="$arg" ;;
        esac
    done

    if [ "$use_pipe" = "true" ]
    then
        rm_line "$line" | append_line --use-pipe
    elif [ -w "$file" ]
    then
        rm_line "$line" --file="$file" && append_line "$line" --file="$file"
    elif [ -n "$list" ]
    then
        echo "$list" | rm_line --use-pipe "$line" | append_line --use-pipe
    fi
}

rm_file_dups() {
    dups=$(sort "$1" | uniq -D)

    while [ -n "$dups" ]
    do
        dup=$(echo "$dups" | head -n 1)

        to_bottom "$dup" --file="$1"

        dups=$(sort "$1" | uniq -D)
    done
}

rm_list_dups() {
    dups=$(echo "$1" | sort | uniq -D)

    new_list=""

    while [ -n "$dups" ]
    do
        dup=$(echo "$dups" | head -n 1)

        new_list=$(to_bottom "$dup" --list="$new_list")

        dups=$(echo "$new_list" | sort | uniq -D)
    done

    echo "$new_list"
}

concat_list() {
    echo "$1
$2"
}

list_add() {
    if [ -z "$1" ]
    then
        echo "$2"
    else
        echo "$1
$2"
    fi
}

# Syncs the file list to the main file list.
sync_file_file() {
    rm_file_dups "$1" 

    uniq=$(cat "$1" "$2" | sort | uniq -u)

    IFS="
"
    for line in $uniq
    do
        if ! grep -Fqx -- "$line" "$1"
        then
            prepend_line "$line" --file="$1"
        elif ! grep -Fqx -- "$line" "$2"
        then
            rm_line "$line" --file="$1"
        fi

        if [ "$(grep -Fqxc -- "$line" "$1")" -gt 1 ]
        then
            to_top "$line" --file="$1"
        fi
    done
    unset IFS
}

# Syncs the file list to the main list.
sync_file_list() {
    rm_file_dups "$1"

    uniq=$(list_add "$2" "$(cat "$1" 2>/dev/null)" | sort | uniq -u)

    IFS="
"
    for line in $uniq
    do
        if ! grep -Fqx -- "$line" "$1"
        then
            prepend_line "$line" --file="$1"
        elif ! echo "$2" | grep -Fqx -- "$line"
        then
            rm_line "$line" --file="$1"
        fi

        if [ "$(grep -Fqxc -- "$line" "$1")" -gt 1 ]
        then
            to_top "$line" --file="$1"
        fi
    done
    unset IFS
}

# Syncs the list to the main list.
sync_list_list() {
    new_list=$(rm_list_dups "$1")

    uniq=$(list_add "$2" "$new_list" | sort | uniq -u)

    IFS="
"
    for line in $uniq
    do
        if ! echo "$new_list" | grep -Fqx -- "$line"
        then
            new_list=$(prepend_line "$line" --list="$new_list")
        elif ! echo "$2" | grep -Fqx -- "$line"
        then
            new_list=$(rm_line "$line" --list="$new_list")
        fi

        if [ "$(grep -Fqxc -- "$line" "$1")" -gt 1 ]
        then
            new_list=$(to_top "$line" --list="$new_list")
        fi
    done
    unset IFS

    echo "$new_list"
}

esc_spaces() {
    echo "$1" | sed 's/\\ / /g;s/ /\\ /g'
}

