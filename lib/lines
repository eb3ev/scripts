. "${SCRIPTS_DIR:-${0%/*}/..}/scriptsrc"

prepend_to_lines() {
    if [ -w "$2" ]
    then
        sed -i "s/^/$1/" "$2"
    elif [ "$1" = "--use-pipe" ]
    then
        sed "s/^/$1/"
    else
        echo "$2" | sed "s/^/$1/"
    fi
}

append_to_lines() {
    if [ -w "$2" ]
    then
        sed -i "s/$/$1/" "$2"
    elif [ "$1" = "--use-pipe" ]
    then
        sed "s/$/$1/"
    else
        echo "$2" | sed "s/$/$1/"
    fi
}

prepend_line() {
    if [ -w "$2" ]
    then
        if [ -s "$2" ]
        then
            sed -i "1i\\$1" "$2"
        else
            echo "$1" >> "$2"
        fi
    elif [ "$1" = "--use-pipe" ]
    then
        sed "1i\\$2"
    else
        echo "$2" | sed "1i\\$1"
    fi
}

append_line() {
    if [ -w "$2" ]
    then
        echo "$1" >> "$2"
    elif [ "$1" = "--use-pipe" ]
    then
        sed "\$a\\$2"
    else
        echo "$2" | sed "\$a\\$1"
    fi
}

rm_line() {
    regex=$(enc --sed-regex "$1")
    if [ -w "$2" ]
    then
        sed -i "/^$regex\$/d" "$2"
    elif [ $# -eq 2 ]
    then
        echo "$2" | sed "/^$regex\$/d"
    else
        sed "/^$regex$/d"
    fi
}

to_top() {
    if [ -w "$2" ]
    then
        rm_line "$1" "$2" && prepend_line "$1" "$2"
    elif [ "$1" = "--use-pipe" ]
    then
        rm_line "$2" | prepend_line --use-pipe
    else
        echo "$2" | rm_line "$1" | prepend_line --use-pipe
    fi
}

to_bottom() {
    if [ -w "$2" ]
    then
        rm_line "$1" "$2" && append_line "$1" "$2"
    elif [ "$1" = "--use-pipe" ]
    then
        rm_line "$2" | append_line --use-pipe
    else
        echo "$2" | rm_line "$1" | append_line --use-pipe
    fi
}

rm_file_dups() {
    dups=$(sort "$1" | uniq -D)

    while [ -n "$dups" ]
    do
        dup=$(echo "$dups" | head -n 1)

        to_bottom "$dup" "$1"

        dups=$(sort "$1" | uniq -D)
    done
}

rm_list_dups() {
    dups=$(echo "$1" | sort | uniq -D)

    new_list=""

    while [ -n "$dups" ]
    do
        dup=$(echo "$dups" | head -n 1)

        new_list=$(to_bottom "$dup" "$new_list")

        dups=$(echo "$new_list" | sort | uniq -D)
    done

    echo "$new_list"
}

concat_list() {
    echo -e "$1\n$2"
}

list_add() {
    if [ -z "$1" ]
    then
        echo "$2"
    else
        concat_list "$1" "$2"
    fi
}

# Syncs the file list to the main file list.
sync_file_file() {
    rm_file_dups "$1" 

    uniq=$(cat "$1" "$2" | sort | uniq -u)

    IFS="
"
    for line in $uniq
    do
        if [ -z "$(grep -x -- "$line" "$1")" ]
        then
            prepend_line "$line" "$1"
        elif [ -z "$(grep -x -- "$line" "$2")" ]
        then
            rm_line "$line" "$1"
        fi

        if [ $(grep -x -- "$line" "$1" | wc -l) -gt 1 ]
        then
            to_top "$line" "$1"
        fi
    done
    unset IFS
}

# Syncs the file list to the main list.
sync_file_list() {
    rm_file_dups "$1"

    uniq=$(echo -e "$2\n$(< "$1")" | sort | uniq -u)

    IFS="
"
    for line in $uniq
    do
        if [ -z "$(grep -x -- "$line" "$1")" ]
        then
            prepend_line "$line" "$1"
        elif [ -z "$(echo "$2" | grep -x -- "$line")" ]
        then
            rm_line "$line" "$1"
        fi

        if [ $(grep -x -- "$line" "$1" | wc -l) -gt 1 ]
        then
            to_top "$line" "$1"
        fi
    done
    unset IFS
}

# Syncs the list to the main list.
sync_list_list() {
    new_list=$(rm_list_dups "$1")

    uniq=$(echo -e "$2\n$new_list" | sort | uniq -u)

    IFS="
"
    for line in $uniq
    do
        if [ -z "$(echo "$new_list" | grep -x -- "$line")" ]
        then
            new_list=$(echo "$new_list" | prepend_line --use-pipe "$line")
        elif [ -z "$(echo "$2" | grep -x -- "$line")" ]
        then
            new_list=$(echo "$new_list" | rm_line "$line")
        fi

        if [ $(grep -x -- "$line" "$1" | wc -l) -gt 1 ]
        then
            new_list=$(to_top "$line" "$new_list")
        fi
    done
    unset IFS

    echo "$new_list"
}

esc_spaces() {
    echo "$1" | sed 's/\\ / /g;s/ /\\ /g'
}

